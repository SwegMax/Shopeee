package com.example.shopeee.views

import android.os.Bundle
import androidx.appcompat.app.AppCompatActivity
import androidx.recyclerview.widget.GridLayoutManager
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.example.shopeee.R
import com.example.shopeee.adapter.RecyclerViewAdapter
import com.example.shopeee.repository.Item
import com.example.shopeee.databinding.ActivityMainBinding
import com.example.shopeee.controllerMVC.AuthController
import com.example.shopeee.interfaces.RetrofitInterface
import io.realm.Realm
import io.realm.mongodb.App
import retrofit2.Retrofit
import retrofit2.converter.gson.GsonConverterFactory

class MainActivity : AppCompatActivity() {
    private var retrofit: Retrofit? = null //change to val?
    private var retrofitInterface: RetrofitInterface? = null
    private val BASE_URL = "http://localhost:8080"

    private lateinit var newRecyclerView : RecyclerView
    private lateinit var newArrayList : ArrayList<Item>
    lateinit var itemImage : Array<Int>
    lateinit var heading : Array<String>
    lateinit var id : Array<Long>
    lateinit var quantity : Array<Int>

    var mainBinding : ActivityMainBinding? = null
    lateinit var app : App
    private val appId = "shopeee-zuqyq"

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        mainBinding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(R.layout.activity_main)

        //Realm
        Realm.init(this)
        app = App(appId)

        val authHandler = AuthController(this, app)

        mainBinding!!.loginRedirectBtn.setOnClickListener{
            authHandler.handleLoginDialog()
        }

        mainBinding!!.signupRedirectBtn.setOnClickListener{
            authHandler.handleSignupDialog()
        }

        if (retrofit != null) {
            retrofit = Retrofit.Builder()
                    .baseUrl(BASE_URL)
                    .addConverterFactory(GsonConverterFactory.create())
                    .build()
        }

        retrofitInterface = retrofit?.create(RetrofitInterface::class.java)
        /*findViewById<View>(R.id.loginRedirectBtn).setOnClickListener{
            AuthHandler(this, retrofitInterface).handleLoginDialog() }*/


        /*//MVVM get Items repo(temp)
        val repository = ItemsRepository(ItemsApi())

        GlobalScope.launch(Dispatchers.Main){
            val items = repository.getItems()
            Toast.makeText(this@MainActivity, items.toString(), Toast.LENGTH_LONG).show()
        }*/


        //Items list
        //replace with database array
        itemImage = arrayOf()
        heading = arrayOf()

        newRecyclerView = findViewById(R.id.recyclerView)
        val layoutManager = GridLayoutManager(this, 2)
        newRecyclerView.layoutManager = layoutManager
        newRecyclerView.setHasFixedSize(true)

        newArrayList = arrayListOf<Item>()
        getUserData()


    }

    /* Shopee uses a lot of override, @Override or override method type
    Generated by Dagger - CoroutineModule_...DispatcherFactory
    -init Lazy
    -where does the user data go?
    -add secure login
    -Exceptions/error message when server is not available

    Add logout button
    Add SLS login or sth
    Storing user info in Realm and item info in API!
    Put all strings into xml file
    DB structure: userID has an array of items that will be fetched
    threads- whether it will interept main
    mongodb realm- how to secure login

    MongoDB:
    jervis
    qPfg9k1ydEL7VnVt

    Fragments for items (simple)
    Views for login and sign up (complex)
    */

    private fun getUserData() {
        for(i in itemImage.indices) {
            val item = Item(itemImage[i],heading[i],id[i],quantity[i])
            newArrayList.add(item)
        }
        newRecyclerView.adapter = RecyclerViewAdapter(newArrayList)
    }
}